//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eShopClient.eShopServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessData", Namespace="http://schemas.datacontract.org/2004/07/eShopService.Data")]
    [System.SerializableAttribute()]
    public partial class BusinessData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int businessIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string businessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ownerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int businessId {
            get {
                return this.businessIdField;
            }
            set {
                if ((this.businessIdField.Equals(value) != true)) {
                    this.businessIdField = value;
                    this.RaisePropertyChanged("businessId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string businessName {
            get {
                return this.businessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.businessNameField, value) != true)) {
                    this.businessNameField = value;
                    this.RaisePropertyChanged("businessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ownerId {
            get {
                return this.ownerIdField;
            }
            set {
                if ((this.ownerIdField.Equals(value) != true)) {
                    this.ownerIdField = value;
                    this.RaisePropertyChanged("ownerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductData", Namespace="http://schemas.datacontract.org/2004/07/eShopService.Data")]
    [System.SerializableAttribute()]
    public partial class ProductData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int businessIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string businessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string keysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int productIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string productNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int businessId {
            get {
                return this.businessIdField;
            }
            set {
                if ((this.businessIdField.Equals(value) != true)) {
                    this.businessIdField = value;
                    this.RaisePropertyChanged("businessId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string businessName {
            get {
                return this.businessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.businessNameField, value) != true)) {
                    this.businessNameField = value;
                    this.RaisePropertyChanged("businessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string keys {
            get {
                return this.keysField;
            }
            set {
                if ((object.ReferenceEquals(this.keysField, value) != true)) {
                    this.keysField = value;
                    this.RaisePropertyChanged("keys");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int productId {
            get {
                return this.productIdField;
            }
            set {
                if ((this.productIdField.Equals(value) != true)) {
                    this.productIdField = value;
                    this.RaisePropertyChanged("productId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string productName {
            get {
                return this.productNameField;
            }
            set {
                if ((object.ReferenceEquals(this.productNameField, value) != true)) {
                    this.productNameField = value;
                    this.RaisePropertyChanged("productName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionData", Namespace="http://schemas.datacontract.org/2004/07/eShopService.Data")]
    [System.SerializableAttribute()]
    public partial class TransactionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string buyerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string productNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sellerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int transactionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string buyerName {
            get {
                return this.buyerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.buyerNameField, value) != true)) {
                    this.buyerNameField = value;
                    this.RaisePropertyChanged("buyerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string productName {
            get {
                return this.productNameField;
            }
            set {
                if ((object.ReferenceEquals(this.productNameField, value) != true)) {
                    this.productNameField = value;
                    this.RaisePropertyChanged("productName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sellerName {
            get {
                return this.sellerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.sellerNameField, value) != true)) {
                    this.sellerNameField = value;
                    this.RaisePropertyChanged("sellerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int transactionId {
            get {
                return this.transactionIdField;
            }
            set {
                if ((this.transactionIdField.Equals(value) != true)) {
                    this.transactionIdField = value;
                    this.RaisePropertyChanged("transactionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerData", Namespace="http://schemas.datacontract.org/2004/07/eShopService.Data")]
    [System.SerializableAttribute()]
    public partial class CustomerData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int accountBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string customerFNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int customerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string customerLNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string phoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int accountBalance {
            get {
                return this.accountBalanceField;
            }
            set {
                if ((this.accountBalanceField.Equals(value) != true)) {
                    this.accountBalanceField = value;
                    this.RaisePropertyChanged("accountBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string customerFName {
            get {
                return this.customerFNameField;
            }
            set {
                if ((object.ReferenceEquals(this.customerFNameField, value) != true)) {
                    this.customerFNameField = value;
                    this.RaisePropertyChanged("customerFName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int customerId {
            get {
                return this.customerIdField;
            }
            set {
                if ((this.customerIdField.Equals(value) != true)) {
                    this.customerIdField = value;
                    this.RaisePropertyChanged("customerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string customerLName {
            get {
                return this.customerLNameField;
            }
            set {
                if ((object.ReferenceEquals(this.customerLNameField, value) != true)) {
                    this.customerLNameField = value;
                    this.RaisePropertyChanged("customerLName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string phone {
            get {
                return this.phoneField;
            }
            set {
                if ((object.ReferenceEquals(this.phoneField, value) != true)) {
                    this.phoneField = value;
                    this.RaisePropertyChanged("phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="eShopServiceReference.ILoginService", CallbackContract=typeof(eShopClient.eShopServiceReference.ILoginServiceCallback))]
    public interface ILoginService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/Login", ReplyAction="http://tempuri.org/ILoginService/LoginResponse")]
        void Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/Login", ReplyAction="http://tempuri.org/ILoginService/LoginResponse")]
        System.Threading.Tasks.Task LoginAsync(string username, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ResponseToLogin", ReplyAction="http://tempuri.org/ILoginService/ResponseToLoginResponse")]
        void ResponseToLogin(int response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ResponseToLogout", ReplyAction="http://tempuri.org/ILoginService/ResponseToLogoutResponse")]
        void ResponseToLogout();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginServiceChannel : eShopClient.eShopServiceReference.ILoginService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginServiceClient : System.ServiceModel.DuplexClientBase<eShopClient.eShopServiceReference.ILoginService>, eShopClient.eShopServiceReference.ILoginService {
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string username, string password) {
            base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="eShopServiceReference.ISignUpService", CallbackContract=typeof(eShopClient.eShopServiceReference.ISignUpServiceCallback))]
    public interface ISignUpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/SignUp", ReplyAction="http://tempuri.org/ISignUpService/SignUpResponse")]
        void SignUp(string username, string password, int customerId, string firstName, string lastName, string address, string phone, int accountBalance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/SignUp", ReplyAction="http://tempuri.org/ISignUpService/SignUpResponse")]
        System.Threading.Tasks.Task SignUpAsync(string username, string password, int customerId, string firstName, string lastName, string address, string phone, int accountBalance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/CheckUsernameAvailability", ReplyAction="http://tempuri.org/ISignUpService/CheckUsernameAvailabilityResponse")]
        void CheckUsernameAvailability(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/CheckUsernameAvailability", ReplyAction="http://tempuri.org/ISignUpService/CheckUsernameAvailabilityResponse")]
        System.Threading.Tasks.Task CheckUsernameAvailabilityAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/CheckIdAvailability", ReplyAction="http://tempuri.org/ISignUpService/CheckIdAvailabilityResponse")]
        void CheckIdAvailability(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/CheckIdAvailability", ReplyAction="http://tempuri.org/ISignUpService/CheckIdAvailabilityResponse")]
        System.Threading.Tasks.Task CheckIdAvailabilityAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISignUpServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/ResponseToSignUp", ReplyAction="http://tempuri.org/ISignUpService/ResponseToSignUpResponse")]
        void ResponseToSignUp(int response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/UsernameAvailabilityResponse", ReplyAction="http://tempuri.org/ISignUpService/UsernameAvailabilityResponseResponse")]
        void UsernameAvailabilityResponse(int response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpService/IdAvailabilityResponse", ReplyAction="http://tempuri.org/ISignUpService/IdAvailabilityResponseResponse")]
        void IdAvailabilityResponse(int response);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISignUpServiceChannel : eShopClient.eShopServiceReference.ISignUpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignUpServiceClient : System.ServiceModel.DuplexClientBase<eShopClient.eShopServiceReference.ISignUpService>, eShopClient.eShopServiceReference.ISignUpService {
        
        public SignUpServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SignUpServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SignUpServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SignUpServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SignUpServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SignUp(string username, string password, int customerId, string firstName, string lastName, string address, string phone, int accountBalance) {
            base.Channel.SignUp(username, password, customerId, firstName, lastName, address, phone, accountBalance);
        }
        
        public System.Threading.Tasks.Task SignUpAsync(string username, string password, int customerId, string firstName, string lastName, string address, string phone, int accountBalance) {
            return base.Channel.SignUpAsync(username, password, customerId, firstName, lastName, address, phone, accountBalance);
        }
        
        public void CheckUsernameAvailability(string username) {
            base.Channel.CheckUsernameAvailability(username);
        }
        
        public System.Threading.Tasks.Task CheckUsernameAvailabilityAsync(string username) {
            return base.Channel.CheckUsernameAvailabilityAsync(username);
        }
        
        public void CheckIdAvailability(int id) {
            base.Channel.CheckIdAvailability(id);
        }
        
        public System.Threading.Tasks.Task CheckIdAvailabilityAsync(int id) {
            return base.Channel.CheckIdAvailabilityAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="eShopServiceReference.ISignUpBusinessService")]
    public interface ISignUpBusinessService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpBusinessService/SignUpBusiness", ReplyAction="http://tempuri.org/ISignUpBusinessService/SignUpBusinessResponse")]
        int SignUpBusiness(int ownerId, int businessId, string businessName, string businessAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpBusinessService/SignUpBusiness", ReplyAction="http://tempuri.org/ISignUpBusinessService/SignUpBusinessResponse")]
        System.Threading.Tasks.Task<int> SignUpBusinessAsync(int ownerId, int businessId, string businessName, string businessAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpBusinessService/CheckBusinessIdAvalibility", ReplyAction="http://tempuri.org/ISignUpBusinessService/CheckBusinessIdAvalibilityResponse")]
        int CheckBusinessIdAvalibility(int businessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISignUpBusinessService/CheckBusinessIdAvalibility", ReplyAction="http://tempuri.org/ISignUpBusinessService/CheckBusinessIdAvalibilityResponse")]
        System.Threading.Tasks.Task<int> CheckBusinessIdAvalibilityAsync(int businessId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISignUpBusinessServiceChannel : eShopClient.eShopServiceReference.ISignUpBusinessService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignUpBusinessServiceClient : System.ServiceModel.ClientBase<eShopClient.eShopServiceReference.ISignUpBusinessService>, eShopClient.eShopServiceReference.ISignUpBusinessService {
        
        public SignUpBusinessServiceClient() {
        }
        
        public SignUpBusinessServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SignUpBusinessServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SignUpBusinessServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SignUpBusinessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SignUpBusiness(int ownerId, int businessId, string businessName, string businessAddress) {
            return base.Channel.SignUpBusiness(ownerId, businessId, businessName, businessAddress);
        }
        
        public System.Threading.Tasks.Task<int> SignUpBusinessAsync(int ownerId, int businessId, string businessName, string businessAddress) {
            return base.Channel.SignUpBusinessAsync(ownerId, businessId, businessName, businessAddress);
        }
        
        public int CheckBusinessIdAvalibility(int businessId) {
            return base.Channel.CheckBusinessIdAvalibility(businessId);
        }
        
        public System.Threading.Tasks.Task<int> CheckBusinessIdAvalibilityAsync(int businessId) {
            return base.Channel.CheckBusinessIdAvalibilityAsync(businessId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="eShopServiceReference.IMainActivitiesService")]
    public interface IMainActivitiesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/UpdateCustomerInfo", ReplyAction="http://tempuri.org/IMainActivitiesService/UpdateCustomerInfoResponse")]
        void UpdateCustomerInfo(int id, string fName, string lName, string address, string phone, float accountBalance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/UpdateCustomerInfo", ReplyAction="http://tempuri.org/IMainActivitiesService/UpdateCustomerInfoResponse")]
        System.Threading.Tasks.Task UpdateCustomerInfoAsync(int id, string fName, string lName, string address, string phone, float accountBalance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/CheckIfCustomerGotBusiness", ReplyAction="http://tempuri.org/IMainActivitiesService/CheckIfCustomerGotBusinessResponse")]
        bool CheckIfCustomerGotBusiness(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/CheckIfCustomerGotBusiness", ReplyAction="http://tempuri.org/IMainActivitiesService/CheckIfCustomerGotBusinessResponse")]
        System.Threading.Tasks.Task<bool> CheckIfCustomerGotBusinessAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetOwnerIdFromUsername", ReplyAction="http://tempuri.org/IMainActivitiesService/GetOwnerIdFromUsernameResponse")]
        int GetOwnerIdFromUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetOwnerIdFromUsername", ReplyAction="http://tempuri.org/IMainActivitiesService/GetOwnerIdFromUsernameResponse")]
        System.Threading.Tasks.Task<int> GetOwnerIdFromUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/Logout", ReplyAction="http://tempuri.org/IMainActivitiesService/LogoutResponse")]
        void Logout(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/Logout", ReplyAction="http://tempuri.org/IMainActivitiesService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetBusinessInformation", ReplyAction="http://tempuri.org/IMainActivitiesService/GetBusinessInformationResponse")]
        eShopClient.eShopServiceReference.BusinessData GetBusinessInformation(int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetBusinessInformation", ReplyAction="http://tempuri.org/IMainActivitiesService/GetBusinessInformationResponse")]
        System.Threading.Tasks.Task<eShopClient.eShopServiceReference.BusinessData> GetBusinessInformationAsync(int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/UpdateBusinessInfo", ReplyAction="http://tempuri.org/IMainActivitiesService/UpdateBusinessInfoResponse")]
        void UpdateBusinessInfo(int businessId, string businessName, string businessAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/UpdateBusinessInfo", ReplyAction="http://tempuri.org/IMainActivitiesService/UpdateBusinessInfoResponse")]
        System.Threading.Tasks.Task UpdateBusinessInfoAsync(int businessId, string businessName, string businessAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetBusinessProducts", ReplyAction="http://tempuri.org/IMainActivitiesService/GetBusinessProductsResponse")]
        eShopClient.eShopServiceReference.ProductData[] GetBusinessProducts(int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetBusinessProducts", ReplyAction="http://tempuri.org/IMainActivitiesService/GetBusinessProductsResponse")]
        System.Threading.Tasks.Task<eShopClient.eShopServiceReference.ProductData[]> GetBusinessProductsAsync(int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/AddProductForBusiness", ReplyAction="http://tempuri.org/IMainActivitiesService/AddProductForBusinessResponse")]
        int AddProductForBusiness(int businessId, int productId, string productName, float productPrice, string productKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/AddProductForBusiness", ReplyAction="http://tempuri.org/IMainActivitiesService/AddProductForBusinessResponse")]
        System.Threading.Tasks.Task<int> AddProductForBusinessAsync(int businessId, int productId, string productName, float productPrice, string productKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/DeleteProductForBusiness", ReplyAction="http://tempuri.org/IMainActivitiesService/DeleteProductForBusinessResponse")]
        void DeleteProductForBusiness(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/DeleteProductForBusiness", ReplyAction="http://tempuri.org/IMainActivitiesService/DeleteProductForBusinessResponse")]
        System.Threading.Tasks.Task DeleteProductForBusinessAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/UpdateProductInfo", ReplyAction="http://tempuri.org/IMainActivitiesService/UpdateProductInfoResponse")]
        void UpdateProductInfo(int businessId, int productId, string productName, float productPrice, string productKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/UpdateProductInfo", ReplyAction="http://tempuri.org/IMainActivitiesService/UpdateProductInfoResponse")]
        System.Threading.Tasks.Task UpdateProductInfoAsync(int businessId, int productId, string productName, float productPrice, string productKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/SearchByProduct", ReplyAction="http://tempuri.org/IMainActivitiesService/SearchByProductResponse")]
        eShopClient.eShopServiceReference.ProductData[] SearchByProduct(string searchText, bool inRange, int from, int to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/SearchByProduct", ReplyAction="http://tempuri.org/IMainActivitiesService/SearchByProductResponse")]
        System.Threading.Tasks.Task<eShopClient.eShopServiceReference.ProductData[]> SearchByProductAsync(string searchText, bool inRange, int from, int to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/SearchByBusiness", ReplyAction="http://tempuri.org/IMainActivitiesService/SearchByBusinessResponse")]
        eShopClient.eShopServiceReference.ProductData[] SearchByBusiness(string searchText, bool inRange, int from, int to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/SearchByBusiness", ReplyAction="http://tempuri.org/IMainActivitiesService/SearchByBusinessResponse")]
        System.Threading.Tasks.Task<eShopClient.eShopServiceReference.ProductData[]> SearchByBusinessAsync(string searchText, bool inRange, int from, int to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/CheckBalanceBeforePurchase", ReplyAction="http://tempuri.org/IMainActivitiesService/CheckBalanceBeforePurchaseResponse")]
        bool CheckBalanceBeforePurchase(int cartCost, int buyerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/CheckBalanceBeforePurchase", ReplyAction="http://tempuri.org/IMainActivitiesService/CheckBalanceBeforePurchaseResponse")]
        System.Threading.Tasks.Task<bool> CheckBalanceBeforePurchaseAsync(int cartCost, int buyerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/BuyCart", ReplyAction="http://tempuri.org/IMainActivitiesService/BuyCartResponse")]
        void BuyCart(eShopClient.eShopServiceReference.ProductData[] cartList, int buyerId, float[] itemsTotalPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/BuyCart", ReplyAction="http://tempuri.org/IMainActivitiesService/BuyCartResponse")]
        System.Threading.Tasks.Task BuyCartAsync(eShopClient.eShopServiceReference.ProductData[] cartList, int buyerId, float[] itemsTotalPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/ValidateCartItems", ReplyAction="http://tempuri.org/IMainActivitiesService/ValidateCartItemsResponse")]
        int ValidateCartItems(eShopClient.eShopServiceReference.ProductData[] cartList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/ValidateCartItems", ReplyAction="http://tempuri.org/IMainActivitiesService/ValidateCartItemsResponse")]
        System.Threading.Tasks.Task<int> ValidateCartItemsAsync(eShopClient.eShopServiceReference.ProductData[] cartList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetUpdatedCartList", ReplyAction="http://tempuri.org/IMainActivitiesService/GetUpdatedCartListResponse")]
        eShopClient.eShopServiceReference.ProductData[] GetUpdatedCartList(eShopClient.eShopServiceReference.ProductData[] oldCartList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetUpdatedCartList", ReplyAction="http://tempuri.org/IMainActivitiesService/GetUpdatedCartListResponse")]
        System.Threading.Tasks.Task<eShopClient.eShopServiceReference.ProductData[]> GetUpdatedCartListAsync(eShopClient.eShopServiceReference.ProductData[] oldCartList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetTransactionData", ReplyAction="http://tempuri.org/IMainActivitiesService/GetTransactionDataResponse")]
        eShopClient.eShopServiceReference.TransactionData[] GetTransactionData(int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetTransactionData", ReplyAction="http://tempuri.org/IMainActivitiesService/GetTransactionDataResponse")]
        System.Threading.Tasks.Task<eShopClient.eShopServiceReference.TransactionData[]> GetTransactionDataAsync(int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetCustomerInformation", ReplyAction="http://tempuri.org/IMainActivitiesService/GetCustomerInformationResponse")]
        eShopClient.eShopServiceReference.CustomerData GetCustomerInformation(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainActivitiesService/GetCustomerInformation", ReplyAction="http://tempuri.org/IMainActivitiesService/GetCustomerInformationResponse")]
        System.Threading.Tasks.Task<eShopClient.eShopServiceReference.CustomerData> GetCustomerInformationAsync(int customerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainActivitiesServiceChannel : eShopClient.eShopServiceReference.IMainActivitiesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainActivitiesServiceClient : System.ServiceModel.ClientBase<eShopClient.eShopServiceReference.IMainActivitiesService>, eShopClient.eShopServiceReference.IMainActivitiesService {
        
        public MainActivitiesServiceClient() {
        }
        
        public MainActivitiesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MainActivitiesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainActivitiesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainActivitiesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UpdateCustomerInfo(int id, string fName, string lName, string address, string phone, float accountBalance) {
            base.Channel.UpdateCustomerInfo(id, fName, lName, address, phone, accountBalance);
        }
        
        public System.Threading.Tasks.Task UpdateCustomerInfoAsync(int id, string fName, string lName, string address, string phone, float accountBalance) {
            return base.Channel.UpdateCustomerInfoAsync(id, fName, lName, address, phone, accountBalance);
        }
        
        public bool CheckIfCustomerGotBusiness(int customerId) {
            return base.Channel.CheckIfCustomerGotBusiness(customerId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfCustomerGotBusinessAsync(int customerId) {
            return base.Channel.CheckIfCustomerGotBusinessAsync(customerId);
        }
        
        public int GetOwnerIdFromUsername(string username) {
            return base.Channel.GetOwnerIdFromUsername(username);
        }
        
        public System.Threading.Tasks.Task<int> GetOwnerIdFromUsernameAsync(string username) {
            return base.Channel.GetOwnerIdFromUsernameAsync(username);
        }
        
        public void Logout(string username) {
            base.Channel.Logout(username);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string username) {
            return base.Channel.LogoutAsync(username);
        }
        
        public eShopClient.eShopServiceReference.BusinessData GetBusinessInformation(int ownerId) {
            return base.Channel.GetBusinessInformation(ownerId);
        }
        
        public System.Threading.Tasks.Task<eShopClient.eShopServiceReference.BusinessData> GetBusinessInformationAsync(int ownerId) {
            return base.Channel.GetBusinessInformationAsync(ownerId);
        }
        
        public void UpdateBusinessInfo(int businessId, string businessName, string businessAddress) {
            base.Channel.UpdateBusinessInfo(businessId, businessName, businessAddress);
        }
        
        public System.Threading.Tasks.Task UpdateBusinessInfoAsync(int businessId, string businessName, string businessAddress) {
            return base.Channel.UpdateBusinessInfoAsync(businessId, businessName, businessAddress);
        }
        
        public eShopClient.eShopServiceReference.ProductData[] GetBusinessProducts(int ownerId) {
            return base.Channel.GetBusinessProducts(ownerId);
        }
        
        public System.Threading.Tasks.Task<eShopClient.eShopServiceReference.ProductData[]> GetBusinessProductsAsync(int ownerId) {
            return base.Channel.GetBusinessProductsAsync(ownerId);
        }
        
        public int AddProductForBusiness(int businessId, int productId, string productName, float productPrice, string productKeys) {
            return base.Channel.AddProductForBusiness(businessId, productId, productName, productPrice, productKeys);
        }
        
        public System.Threading.Tasks.Task<int> AddProductForBusinessAsync(int businessId, int productId, string productName, float productPrice, string productKeys) {
            return base.Channel.AddProductForBusinessAsync(businessId, productId, productName, productPrice, productKeys);
        }
        
        public void DeleteProductForBusiness(int productId) {
            base.Channel.DeleteProductForBusiness(productId);
        }
        
        public System.Threading.Tasks.Task DeleteProductForBusinessAsync(int productId) {
            return base.Channel.DeleteProductForBusinessAsync(productId);
        }
        
        public void UpdateProductInfo(int businessId, int productId, string productName, float productPrice, string productKeys) {
            base.Channel.UpdateProductInfo(businessId, productId, productName, productPrice, productKeys);
        }
        
        public System.Threading.Tasks.Task UpdateProductInfoAsync(int businessId, int productId, string productName, float productPrice, string productKeys) {
            return base.Channel.UpdateProductInfoAsync(businessId, productId, productName, productPrice, productKeys);
        }
        
        public eShopClient.eShopServiceReference.ProductData[] SearchByProduct(string searchText, bool inRange, int from, int to) {
            return base.Channel.SearchByProduct(searchText, inRange, from, to);
        }
        
        public System.Threading.Tasks.Task<eShopClient.eShopServiceReference.ProductData[]> SearchByProductAsync(string searchText, bool inRange, int from, int to) {
            return base.Channel.SearchByProductAsync(searchText, inRange, from, to);
        }
        
        public eShopClient.eShopServiceReference.ProductData[] SearchByBusiness(string searchText, bool inRange, int from, int to) {
            return base.Channel.SearchByBusiness(searchText, inRange, from, to);
        }
        
        public System.Threading.Tasks.Task<eShopClient.eShopServiceReference.ProductData[]> SearchByBusinessAsync(string searchText, bool inRange, int from, int to) {
            return base.Channel.SearchByBusinessAsync(searchText, inRange, from, to);
        }
        
        public bool CheckBalanceBeforePurchase(int cartCost, int buyerId) {
            return base.Channel.CheckBalanceBeforePurchase(cartCost, buyerId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckBalanceBeforePurchaseAsync(int cartCost, int buyerId) {
            return base.Channel.CheckBalanceBeforePurchaseAsync(cartCost, buyerId);
        }
        
        public void BuyCart(eShopClient.eShopServiceReference.ProductData[] cartList, int buyerId, float[] itemsTotalPrice) {
            base.Channel.BuyCart(cartList, buyerId, itemsTotalPrice);
        }
        
        public System.Threading.Tasks.Task BuyCartAsync(eShopClient.eShopServiceReference.ProductData[] cartList, int buyerId, float[] itemsTotalPrice) {
            return base.Channel.BuyCartAsync(cartList, buyerId, itemsTotalPrice);
        }
        
        public int ValidateCartItems(eShopClient.eShopServiceReference.ProductData[] cartList) {
            return base.Channel.ValidateCartItems(cartList);
        }
        
        public System.Threading.Tasks.Task<int> ValidateCartItemsAsync(eShopClient.eShopServiceReference.ProductData[] cartList) {
            return base.Channel.ValidateCartItemsAsync(cartList);
        }
        
        public eShopClient.eShopServiceReference.ProductData[] GetUpdatedCartList(eShopClient.eShopServiceReference.ProductData[] oldCartList) {
            return base.Channel.GetUpdatedCartList(oldCartList);
        }
        
        public System.Threading.Tasks.Task<eShopClient.eShopServiceReference.ProductData[]> GetUpdatedCartListAsync(eShopClient.eShopServiceReference.ProductData[] oldCartList) {
            return base.Channel.GetUpdatedCartListAsync(oldCartList);
        }
        
        public eShopClient.eShopServiceReference.TransactionData[] GetTransactionData(int ownerId) {
            return base.Channel.GetTransactionData(ownerId);
        }
        
        public System.Threading.Tasks.Task<eShopClient.eShopServiceReference.TransactionData[]> GetTransactionDataAsync(int ownerId) {
            return base.Channel.GetTransactionDataAsync(ownerId);
        }
        
        public eShopClient.eShopServiceReference.CustomerData GetCustomerInformation(int customerId) {
            return base.Channel.GetCustomerInformation(customerId);
        }
        
        public System.Threading.Tasks.Task<eShopClient.eShopServiceReference.CustomerData> GetCustomerInformationAsync(int customerId) {
            return base.Channel.GetCustomerInformationAsync(customerId);
        }
    }
}
